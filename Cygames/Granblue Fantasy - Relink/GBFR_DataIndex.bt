//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: Granblue Fantasy: Relink Data Index (data.i)
//   Authors: Nenkai
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// Base steam release - useful offsets:
// .i reader = 0x1401ABD50
// hash finder = 0x1406F8380
// xxhash = 0x14069AC40
// decompression: 0x143666F40

typedef struct
{
    int FieldOffsetTableNegative <format=hex, fgcolor=cRed>;
    
    FSeek(startof(FieldOffsetTableNegative) - FieldOffsetTableNegative);
    short OffsetTableSize <fgcolor=cGreen>;
    short OffsetTable[(OffsetTableSize / sizeof(ushort)) - 1] <format=hex, fgcolor=cRed>;
    FSeek(FileSize());
} FlatArkFields <bgcolor=cBlack>;

typedef struct
{
    int FieldsOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(FieldsOffset) + FieldsOffset);
    
    FlatArkFields Fields;
    FSeek(FileSize());
} FlatArkHeader <bgcolor=cPurple>;

FlatArkHeader Hdr;

FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[1]);
struct
{
    int StrOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(StrOffset) + StrOffset);
    int StrLength <bgcolor=cYellow, format=hex>;
    char Str[StrLength] <bgcolor=cYellow, format=hex>;
} CodeName;

FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[2]);
ushort NumArchives;

FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[3]);
ushort XXHashSeed;

FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[4]);
struct 
{
    int DataOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(DataOffset) + DataOffset);
    
    struct
    {
        int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
        uint64 Hashes[NumEntries] <format=hex>;
    } Table;
} ArchiveFileHashes <bgcolor=cBlack>;

FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[5]);
struct 
{
    int DataOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(DataOffset) + DataOffset);
    
    struct
    {
        int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
        struct
        {
            uint ChunkEntryIndex;
            uint FileSize;
            uint OffsetIntoDecompressedChunk;
        } FileToChunkIndexer[NumEntries] <bgcolor=cRed>;
    } Table;
} FileToChunkIndexers;

FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[6]);
struct 
{
    int DataOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(DataOffset) + DataOffset);
    
    struct
    {
        int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
        struct
        {
            uint64 FileOffset <format=hex>;
            uint Size <format=hex>;
            uint CompressedSize <format=hex>;
            uint AllocAlignment <format=hex>;
            byte UnkBool;
            byte Pad;
            byte DataFileNumber;
            byte Pad;
        } DataChunk[NumEntries] <bgcolor=cRed>;
    } Table;
} Chunks <bgcolor=cDkBlue>;

FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[7]);
struct 
{
    int DataOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(DataOffset) + DataOffset);
    
    struct
    {
        int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
        uint64 Hashes[NumEntries] <format=hex>;
    } Table;
} ExternalFileHashes <bgcolor=cGreen>;

FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[8]);
struct 
{
    int DataOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(DataOffset) + DataOffset);
    
    struct
    {
        int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
        uint64 Sizes[NumEntries] <format=hex>;
    } Table;
} ExternalFileSizes <bgcolor=cDkGreen>;

FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[9]);
struct 
{
    int DataOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(DataOffset) + DataOffset);
    
    struct
    {
        int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
        uint Indices[NumEntries] <format=hex>;
    } Table;
} CachedChunkIndices;
