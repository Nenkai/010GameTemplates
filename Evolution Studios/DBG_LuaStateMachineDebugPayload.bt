//------------------------------------------------
//--- 010 Editor v15.0 Binary Template
//
//      File: State Machine Debug Payload
//   Authors: Evolution Studios? Maybe not. Could be private third party library - code has asserts and looks to be compiled aside from the engine. Relevant path: ./../libwws_stm/stm_profile_impl.h
//   Version: 
//   Purpose:
//  Category: 
// File Mask: *.dbg
//  ID Bytes: 20 4D 54 53
//   History: 
//------------------------------------------------

// This file is REQUIRED by DriveClub
// It is used to fetch names sometimes for some properties & other things.

typedef int OffsetT <format=hex, fgcolor=cRed>;
struct
{
    uint Magic <format=hex, comment="Should be 'STM_', is checked">;
    uint PayloadVersion <format=hex, comment="Is checked">;
    uint ResourceType <format=hex, comment="Should be 'SMDB', is checked">;
    uint PayloadSize <format=hex>;
} DebugMap <bgcolor=cPurple>;

struct
{
    OffsetT SourceProjectAssetFilenameOffset;
    OffsetT StateNamesOffset;
    OffsetT MachineNamesOffset;
    OffsetT SourceMachineAssetFilenames;
    OffsetT TransitionNamesOffset;
    OffsetT PropertyDataOffset;
    short StateNamesCount;
    short MachineNameCount;
    short SourceMachineAssetFilenameCount;
    short TransitionNamesCount;
    short PropertyDataCount;
    
    FSeek(startof(SourceProjectAssetFilenameOffset) + SourceProjectAssetFilenameOffset);
    string SourceProjectAssetFilename;
    
    struct
    {
        FSeek(startof(StateNamesOffset) + StateNamesOffset);
        OffsetT Offsets[StateNamesCount];
        local int i = 0;
        
        for (i = 0; i < StateNamesCount; i++)
        {
            FSeek(startof(Offsets[i]) + Offsets[i]);
            struct
            {
                string Name;
            } StateName <read=Name>;
        }
    } States <bgcolor=cYellow>;

    struct
    {
        FSeek(startof(TransitionNamesOffset) + TransitionNamesOffset);
        OffsetT Offsets[TransitionNamesCount];
        local int i = 0;
        
        for (i = 0; i < TransitionNamesCount; i++)
        {
            FSeek(startof(Offsets[i]) + Offsets[i]);
            struct
            {
                string Name;
            } TransitionName <read=Name>;
        }
    } Transitions <bgcolor=cRed>;
    
    struct
    {
        FSeek(startof(SourceMachineAssetFilenames) + SourceMachineAssetFilenames);
        OffsetT Offsets[MachineNameCount];
        local int i = 0;
        
        for (i = 0; i < MachineNameCount; i++)
        {
            FSeek(startof(Offsets[i]) + Offsets[i]);
            struct
            {
                string Name;
            } MachineName <read=Name>;
        }
    } Machines <bgcolor=cDkBlue>;
    
    struct
    {
        FSeek(startof(PropertyDataOffset) + PropertyDataOffset);
        struct
        {
            OffsetT Offset;
            ushort PropertyIndex;
            ushort _pad_;
        } PropInfos[PropertyDataCount];
        local int i = 0;
        
        for (i = 0; i < PropertyDataCount; i++)
        {
            FSeek(startof(PropInfos.Offset[i]) + PropInfos.Offset[i]);
            struct
            {
                OffsetT EventNamesOffset;
                OffsetT UnkNamesOffset;
                OffsetT ScriptNamesOffset;

                FSeek(startof(ScriptNamesOffset) + ScriptNamesOffset);
                // Array length is not provided, the game would simply fetch using information from the state machine file
                // Since this uses relative offsets, we can use the first offset and use it as the offset table size
                // Then divide it by 4
                local uint count = ReadUInt() / 0x04;
                struct
                {
                    OffsetT SourceFileOffsets[count];
                    local int j = 0;
                    for (j = 0; j < count; j++)
                    {
                        FSeek(startof(SourceFileOffsets[j]) + SourceFileOffsets[j]);
                        struct
                        {
                            string SourceFile;
                        } SourceFile <read=SourceFile>;
                    }
                } SourceFiles;
                
                FSeek(startof(UnkNamesOffset) + UnkNamesOffset);
                count = ReadUInt() / 0x04;
                struct
                {
                    OffsetT UnkNamesOffsets[count];
                    local int j = 0;
                    for (j = 0; j < count; j++)
                    {
                        FSeek(startof(UnkNamesOffsets[j]) + UnkNamesOffsets[j]);
                        struct
                        {
                            string Str;
                        } UnkName <read=Str>;
                    }
                } UnkNames;

                FSeek(startof(EventNamesOffset) + EventNamesOffset);
                count = ReadUInt() / 0x04;
                struct
                {
                    OffsetT EventNamesOffsets[count];
                    local int j = 0;
                    for (j = 0; j < count; j++)
                    {
                        FSeek(startof(EventNamesOffsets[j]) + EventNamesOffsets[j]);
                        struct
                        {
                            string Str;
                        } EventName <read=Str>;
                    }
                } EventNames;
            } PropertyData;
        }
    } Properties  <bgcolor=cBlue>;
} Payload <bgcolor=cRed>;
