//------------------------------------------------
//--- 010 Editor v15.0 Binary Template
//
//      File: FFXVI Model
//   Authors: Nenkai
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: .mdl
//  ID Bytes: 4D 44 4C 20
//   History: 
//------------------------------------------------

/////////////////////////////////////////
// Misc structures
/////////////////////////////////////////
typedef struct
{
    int Type;
    int PathOffset;
} AssetRef;
                                
typedef struct
{
    float X;
    float Y;
    float Z;
} Vector3 <read=Str("<%f, %f, %f>", X, Y, Z)>;

typedef struct
{
    uint PathOffset <format=hex, fgcolor=cRed>;
    int Padding[3];
} Material <bgcolor=cDkYellow, read=PrintMaterial>;

typedef struct
{
   uint NameOffset <format=hex, fgcolor=cRed>;
   Vector3 Position;
} Joint <bgcolor=cYellow, read=PrintJoint>;

 typedef struct
 {
     uint NameOffset <format=hex, fgcolor=cRed>;
     int Padding[3];
 } MeshMaterialReference <read=PrintMeshMaterialReference>;
 
typedef struct
{
    uint NameOffset <format=hex, fgcolor=cRed>;
    int field_0x04;
} FaceJoint <bgcolor=cLtYellow, read=PrintFaceJoint>;
            
typedef struct
{
    uint NameOffset <format=hex, fgcolor=cRed>;
    float Unk;
    ushort Indices1[4];
    ushort Indices2[4];
    float Weights1[4];
    float Weights2[4];
    Vector3 UnkVec1;
    Vector3 UnkVec2;
} MuscleJoint <bgcolor=cRed, read=PrintMuscleJoint>;
      
typedef struct
{
    uint NameOffset <format=hex, fgcolor=cRed>;
    int Padding[3];
} AdditionalPart <bgcolor=cDkGreen, read=PrintAdditionalPart, comment="Referenced by partadditionaldataparam, eid (5000-5011 - hardcoded), footwetness">;
           
typedef struct
{
    uint NameOffset <format=hex, fgcolor=cRed>;
    int Padding[3];
} Option <bgcolor=cGreen, read=PrintOption, comment="Addressed from modelcoordinate, max 32. index of this used as bitindex for Entries1 for display">;

typedef struct
{
    uint NameOffset <format=hex, fgcolor=cRed>;
    int UnkIndex;
    int UnkCount;
    int Padding;
} VFXEntry <bgcolor=cLtGreen, read=PrintVFX, comment="Referenced/Used from VFXB files">;
            
/////////////////////////////////////////
//////// Print utils
/////////////////////////////////////////
string PrintMaterial(Material& material)
{
    local int strTableOffset = startof(Model.ModelHeaderUnion.ModelHeader.MaterialFileToLoad)
        + Model.ModelFileHeaderUnion.ModelFileHeader.MaterialCount * 0x10;
        
    if (Model.ModelFileHeaderUnion.ModelFileHeader.field_0x16_bitflags & 2)
        strTableOffset += 0x10;
        
    return ReadString(strTableOffset + material.PathOffset);  
}

string PrintJoint(Joint& joint)
{
    return ReadString(startof(Model.MeshContentsTocUnion.MeshContentsToc.StringTable) + joint.NameOffset);   
}

string PrintMeshMaterialReference(MeshMaterialReference& mat)
{
    return ReadString(startof(Model.MeshContentsTocUnion.MeshContentsToc.StringTable) + mat.NameOffset);   
}

string PrintFaceJoint(FaceJoint& faceJoint)
{
    return ReadString(startof(Model.MeshContentsTocUnion.MeshContentsToc.StringTable) + faceJoint.NameOffset);   
}

string PrintMuscleJoint(MuscleJoint& muscleJoint)
{
    return ReadString(startof(Model.MeshContentsTocUnion.MeshContentsToc.StringTable) + muscleJoint.NameOffset);   
}

string PrintAdditionalPart(AdditionalPart& additionalPart)
{
    return ReadString(startof(Model.MeshContentsTocUnion.MeshContentsToc.StringTable) + additionalPart.NameOffset);   
}

string PrintOption(Option& option)
{
    return ReadString(startof(Model.MeshContentsTocUnion.MeshContentsToc.StringTable) + option.NameOffset);   
}
     
string PrintVFX(VFXEntry& vfx)
{
    return ReadString(startof(Model.MeshContentsTocUnion.MeshContentsToc.StringTable) + vfx.NameOffset);   
}
   
uint AlignValue(uint x, uint alignment)
{
      local uint mask = ~(alignment - 1);
      return (x + (alignment - 1)) & mask;
}

/////////////////////////////////////////
//////// Main struct
/////////////////////////////////////////
struct
{
    local byte version = ReadByte(0x04);
    local int headerSize = version >= 20 ? 0xA8 : 0x98;
    
    union 
    {
        byte ModelFileHeaderBytes[headerSize];
        struct
        {
            uint Magic <format=hex, comment="Must be 'MDL '">;
            byte Version <comment="Must be >= 28">;
            byte Flag <comment="Must have 1">;
            
            // Enum should be complete (hopefully)
            enum <byte>
            {
                GraCommonModel = 0,
                GraphicsModel = 11,
                Unk15Model = 15,
                CharaModel = 16,
                VFXModel = 18,
                Unk32Model = 32,
                MapMergeGridModel = 33,  
            } ModelType <comment="see: sub_140A91550 (ffxvi.exe steam 1.0.1)">;
            
            byte Unk;
            uint ModelHeaderSize <format=hex>; // Starting from 0xA8
            uint MeshContentsTocSize <format=hex>; // Starting after first string table
            ushort MaterialCount;
            ushort FlexVertexAttributeCount;
            byte FlexVertexInfoCount;
            byte MainMeshCount <comment="Should always be 8, last is the main mesh?">;
            byte field_0x16_bitflags;
            byte field_0x17;
            
            uint VertexBufferOffsets[8] <format=hex, fgcolor=cRed>;
            uint IndexBufferOffsets[8] <format=hex, fgcolor=cRed>;
            uint VertexBufferSizes[8] <format=hex, fgcolor=cRed>;
            uint IndexBufferSizes[8] <format=hex, fgcolor=cRed>;
            
            if (version >= 20)
            {
                uint UnkOffset1 <format=hex>;
                uint UnkSize1 <format=hex>;
                uint UnkOffset2 <format=hex>;  
                uint UnkSize2 <format=hex>;
            }
        } ModelFileHeader <bgcolor=cPurple>;
    } ModelFileHeaderUnion;

    union 
    {
        byte ModelHeaderBytes[ModelFileHeaderUnion.ModelFileHeader.ModelHeaderSize];
        struct
        {
            struct
            {
                short FlexVertAttrIndexStart;
                short FlexVertAttrCount;
            } FlexVertexInfo[ModelFileHeaderUnion.ModelFileHeader.FlexVertexInfoCount];
        
            struct
            {
                ubyte BufferIndex;
                ubyte FieldOffset <format=hex>;
                
                // These enums should be complete (at least for the PC version)
                
                // void* result = FVFFieldToDXGI(void* a1, FlexVertexAttributeInfo* a2)
                // ffxvi.exe 1.0.1 - 1409E7CB8
                // sig: 89 54 24 ? 48 83 EC ? 4C 8B D9
                enum <ubyte>
                {
                    ENCODING_SNORM16x2 = 18,   // = 37 = DXGI_FORMAT_R16G16_SNORM
                    ENCODING_SNORM16x4 = 20,   // = 13 = DXGI_FORMAT_R16G16B16A16_SNORM
                    ENCODING_FLOAT = 33,       // = 41 = DXGI_FORMAT_R32_FLOAT
                    ENCODING_FLOATx2 = 34,     // = 16 = DXGI_FORMAT_R32G32_FLOAT
                    ENCODING_FLOATx3 = 35,     // = 6  = DXGI_FORMAT_R32G32B32A32_FLOAT
                    ENCODING_FLOATx4 = 36,     // = 2  = DXGI_FORMAT_R32G32B32A32_FLOAT
                    ENCODING_HALFFLOATx2 = 50, // = 34 = DXGI_FORMAT_R16G16_FLOAT
                    ENCODING_HALFFLOATx4 = 52, // = 10 = DXGI_FORMAT_R16G16B16A16_FLOAT
                    ENCODING_UNORM8x4 = 68,    // = 28 = DXGI_FORMAT_R8G8_B8G8_UNORM
                    ENCODING_SINT16x2 = 82,    // = 38 = DXGI_FORMAT_R16G16_SINT
                    ENCODING_SINT16x4 = 84,    // = 14 = DXGI_FORMAT_R16G16B16A16_SINT
                    ENCODING_UINT8x4 = 116,    // = 30 = DXGI_FORMAT_R8G8B8A8_UINT
                    ENCODING_UINT16x2 = 130,   // = 36 = DXGI_FORMAT_R16G16_UINT
                    ENCODING_UINT16x4 = 132,   // = 12 = DXGI_FORMAT_R16G16B16A16_UINT
                    ENCODING_SINT32 = 145,     // = 43 = DXGI_FORMAT_R32_SINT 
                    ENCODING_SINT32x2 = 146,   // = 18 = DXGI_FORMAT_R32G32_SINT
                    ENCODING_SINT32x3 = 147,   // = 8  = DXGI_FORMAT_R32G32B32_SINT
                    ENCODING_SINT32x4 = 148,   // = 4  = DXGI_FORMAT_R32G32B32A32_SINT  
                    ENCODING_UINT32 = 161,     // = 42 = DXGI_FORMAT_R32_UINT
                    ENCODING_UINT32x2 = 162,   // = 17 = DXGI_FORMAT_R32G32_UINT
                    ENCODING_UINT32x3 = 163,   // = 7  = DXGI_FORMAT_R32G32B32_UINT
                    ENCODING_UINT32x4 = 163,   // = 3  = DXGI_FORMAT_R32G32B32A32_UINT
                    ENCODING_UNORM16x2 = 178,  // = 35 = DXGI_FORMAT_R16G16_UNORM
                    ENCODING_UNORM16x4 = 180,  // = 11 = DXGI_FORMAT_R16G16B16A16_UNORM
                } Encoding;
        
                // void* result = FVFFieldTypeToDXGISemantic(uint8 type, char* outName, int* outSetIndex)
                // ffxvi.exe 1.0.1 - 140A1234C
                // sig: 44 0F B6 C9 41 83 F9
                enum <ubyte>
                {
                    REGISTER_POSITION = 0,
                    REGISTER_BLENDWEIGHT_0 = 1, 
                    REGISTER_BLENDINDICES_0 = 2,
                    REGISTER_COLOR_0 = 3,
                    REGISTER_COLOR_1 = 4,
                    REGISTER_COLOR_2 = 5,
                    REGISTER_COLOR_3 = 6,
                    REGISTER_COLOR_4 = 7,
                    REGISTER_COLOR_5 = 8,
                    REGISTER_COLOR_6 = 9,
                    REGISTER_COLOR_7 = 10,
                    REGISTER_TEXCOORD_0 = 11,
                    REGISTER_TEXCOORD_1 = 12,
                    REGISTER_TEXCOORD_2 = 13,
                    REGISTER_TEXCOORD_3 = 14,
                    REGISTER_TEXCOORD_4 = 15,
                    REGISTER_TEXCOORD_5 = 16,
                    REGISTER_TEXCOORD_6 = 17,
                    REGISTER_TEXCOORD_7 = 18,
                    REGISTER_TEXCOORD_8 = 19,
                    REGISTER_TEXCOORD_9 = 20,
                    REGISTER_TEXCOORD_10_NORMAL = 21, // Used by normals
                    REGISTER_TEXCOORD_11_TANGENT = 22, // Used by tangent
                    REGISTER_TEXCOORD_12_BITANGENT = 23, // Used by bitangents
                    REGISTER_TEXCOORD_13_UNK = 24,
                    REGISTER_TEXCOORD_14_UNK = 25,
                    REGISTER_TEXCOORD_15_UNK = 26,
                    REGISTER_DEPTH = 27,
                    REGISTER_BLENDWEIGHT_1 = 28,
                    REGISTER_BLENDINDICES_1 = 29,
               } AttributeRegister;
               
            } FlexVertexAttributeInfo[ModelFileHeaderUnion.ModelFileHeader.FlexVertexAttributeCount];
            
            float BBoxRadius;
            int Unk2;
            float BoundaryBox[6] <bgcolor=cBlue>;
        
            local int matPos = FTell();
            Material MaterialFileToLoad[ModelFileHeaderUnion.ModelFileHeader.MaterialCount];
            
            // Logic should be the other way around based on game code. Do not read bytes if flag is not present.
            if (Model.ModelFileHeaderUnion.ModelFileHeader.field_0x16_bitflags & 2)
                byte Unk[0x10];
                
        } ModelHeader;
    } ModelHeaderUnion;

    union
    {
        byte MeshContentsTocBytes[ModelFileHeaderUnion.ModelFileHeader.MeshContentsTocSize];
        struct
        {
            union
            {
                local int headerSize = ModelFileHeaderUnion.ModelFileHeader.Version >= 15 ? 0x40 : 0x20;
                
                ubyte MeshContentsHeaderBytes[headerSize];
                struct
                {
                    // This is how the game reads stuff
                    // Refer to 140A923B8 (ffxvi.exe 1.0.0)
                    uint ModelExternalContentSize <format=hex>;
                    ushort SubmeshCount <comment="confirmed read. stride = mainheader.version > 16 ? 0x60 : 0x40">;
                    ushort OptionCount <comment="confirmed read. stride = 0x10">;
                    ushort DrawPartCount <comment="confirmed read. stride = 0x20">;
                    ushort MaterialCount <comment="confirmed read. stride = 0x10">;
                    
                    // For max value: ffxvi.exe 1.0.1 steam - sub_140B8C1E8
                    ushort JointCount <comment="max 1536. stride = 0x10, 0x20 (second struct)">;
                    ushort Count4;
                    ushort Entries6Count <comment="stride = 0x20">;
                    ushort MeshBufferInfoCount <comment="stride = mainheader.version > 14 ? 0x40 : 0x20">;
                    ubyte Unk <comment="Couldn't get a read on this">;
                    ubyte FaceJointCount <comment="stride = 0x8">;
                    ushort MuscleJointCount <comment="stride = 0x50">;
                    ubyte UnkJointParamCount <comment="stride = 0x20">;
                    ubyte AdditionalPartCount <comment="stride = 0x10">;
                    ubyte Flags_0x1A <comment="confirmed read">;
                    ubyte VFXEntryCount <comment="stride = 0x10">;
                    uint ExtraData7Size <format=hex>;
                    uint FlexVertexCount;
                    uint StringTableSize <format=hex>;
                    ubyte field_0x28;
                    ubyte field_0x29;
                    ubyte field_0x2A <comment="confirmed read">;
                    ubyte field_0x2B;
                    uint field_0x2C;
                    float field_0x30;
                    float field_0x34;
                    uint DecompressedBuffer1Size <format=hex>;
                    uint DecompressedBuffer2Size <format=hex>;
                    
                } MeshContentsHeader <bgcolor=cPurple>;
            } MeshContentsHeaderUnion;
            
            // Proper struct order
            union
            {
                local int size = ModelFileHeaderUnion.ModelFileHeader.Version >= 15 ? 0x40 : 0x20;
                byte MeshBufferInfoBytes[size * MeshContentsHeaderUnion.MeshContentsHeader.MeshBufferInfoCount];
                struct
                {
                    ushort SubmeshStartIndex;
                    ushort SubmeshCount;
                    uint unk0;
                    uint unk1;
                    uint TriCount;
                    uint VertexOffset <format=hex, fgcolor=cRed>;
                    uint FacesOffset <format=hex, fgcolor=cRed>;
                    uint DecompressedVerticesSize <format=hex>;
                    uint DecompressedFacesSize <format=hex>;
                    uint DecompFacesSizeMultiplied6 <format=hex>;
                    uint VertexCount;
                    uint Padding[6];
                } MeshBufferInfos[MeshContentsHeaderUnion.MeshContentsHeader.MeshBufferInfoCount] <bgcolor=cBlack>;
            } MeshBufferInfoUnion;
            
            if (MeshContentsHeaderUnion.MeshContentsHeader.SubmeshCount)
            {
                union
                {
                    local int size = ModelFileHeaderUnion.ModelFileHeader.Version >= 17 ? 0x60 : 0x40;
                    byte SubmeshInfosBytes[size * MeshContentsHeaderUnion.MeshContentsHeader.SubmeshCount];
                    struct
                    {
                        uint FaceIndexCount <format=hex>;
                        uint FaceIndicesOffset;
                        ushort VertexCount;
                        ushort MaterialID;
                        ushort DrawPartStartIndex;
                        ushort DrawPartCount;
                        ushort FlexVertexInfoID; //list of attributes
                        byte BoneSetFlags;
                        byte TexCoordSetFlags;
                        uint UnkFlags <format=hex>;
                        uint unks2[6];
                        uint padding;
                        byte unks[3];
                        byte UsedBufferCount;
                        uint BufferOffsets[8] <format=hex>;
                        ubyte Strides[8] <comment="Refer to UsedBufferCount">;
                    } SubmeshInfos[MeshContentsHeaderUnion.MeshContentsHeader.SubmeshCount] <bgcolor=cRed>;
                } SubmeshInfoUnion;
            }
            
            if (MeshContentsHeaderUnion.MeshContentsHeader.DrawPartCount)
            {
                struct
                {
                    uint FaceIndexStart;
                    uint FaceIndexCount;
                    uint OptionFlags <format=hex, comment="Uses Options, index turned into bitindex">;
                    uint Padding[5];
                } DrawParts[MeshContentsHeaderUnion.MeshContentsHeader.DrawPartCount] <bgcolor=cAqua>;
            }
            
            if (MeshContentsHeaderUnion.MeshContentsHeader.JointCount)
                Joint Joints[MeshContentsHeaderUnion.MeshContentsHeader.JointCount];
    
            if (MeshContentsHeaderUnion.MeshContentsHeader.MaterialCount)
                MeshMaterialReference MaterialReference[MeshContentsHeaderUnion.MeshContentsHeader.MaterialCount];
     
            if (MeshContentsHeaderUnion.MeshContentsHeader.FaceJointCount)
                FaceJoint FaceJoints[MeshContentsHeaderUnion.MeshContentsHeader.FaceJointCount];
            
            if (MeshContentsHeaderUnion.MeshContentsHeader.MuscleJointCount)
                MuscleJoint MuscleJoints[MeshContentsHeaderUnion.MeshContentsHeader.MuscleJointCount];
            
            if (MeshContentsHeaderUnion.MeshContentsHeader.UnkJointParamCount)
            {
                struct
                {
                    float field_0x00;
                    float field_0x04;
                    float field_0x08;
                    float field_0x0C;
                    float field_0x10;
                    float field_0x14;
                    float field_0x18;
                    ushort UnkIndex1;
                    byte FaceJointIndex;
                    byte Padding;
                } UnkJointParams[MeshContentsHeaderUnion.MeshContentsHeader.UnkJointParamCount] <bgcolor=cDkRed>;
            }
            
            if (MeshContentsHeaderUnion.MeshContentsHeader.AdditionalPartCount)
                AdditionalPart AdditionalParts[MeshContentsHeaderUnion.MeshContentsHeader.AdditionalPartCount];
    
            if (MeshContentsHeaderUnion.MeshContentsHeader.OptionCount)
                Option Options[MeshContentsHeaderUnion.MeshContentsHeader.OptionCount];
    
            if (MeshContentsHeaderUnion.MeshContentsHeader.VFXEntryCount)
                VFXEntry VFXEntries[MeshContentsHeaderUnion.MeshContentsHeader.VFXEntryCount];
            
            if (MeshContentsHeaderUnion.MeshContentsHeader.Entries6Count)
            {
                struct
                {
                    int field_0x00;
                    int field_0x04;
                    int field_0x08;
                    int field_0x0C;
                    int field_0x10;
                    int field_0x14;
                    int field_0x18;
                    int field_0x1C;
                } Entries6[Toc2HeaderUnion.Toc2Header.Entries6Count] <bgcolor=cLtBlue>;
            }
            
            if (MeshContentsHeaderUnion.MeshContentsHeader.ExtraData7Size)
            {
                byte EntryData7[MeshContentsHeaderUnion.MeshContentsHeader.ExtraData7Size];
                FSeek(AlignValue(FTell(), 0x04));
            }
            
            if (MeshContentsHeaderUnion.MeshContentsHeader.ModelExternalContentSize)
            {
                // MCEX Initter: 48 8B C4 48 89 58 ? 48 89 70 ? 48 89 78 ? 55 41 54 41 55 41 56 41 57 48 8D A8 ? ? ? ? 48 81 EC ? ? ? ? 48 8B 05 ? ? ? ? 48 33 C4 48 89 85 ? ? ? ? 4C 8B 89
                union
                {
                    byte ModelExternalContentBytes[MeshContentsHeaderUnion.MeshContentsHeader.ModelExternalContentSize] <comment="TODO">;
                    struct
                    {
                        int Magic <format=hex>;
                        int field_0x04;
                        int field_0x08;
                        int field_0x0C;
                        int field_0x10;
                        int field_0x14;
                        int field_0x18;
                        int field_0x1C;
                        int Offset <format=hex>;
                        int Count;
                        
                        FSeek(startof(this) + Offset);
                        int DataOffsets[Count];
                            
                        local int j = 0;
                        for (j = 0; j < Count; j++)
                        {
                            // 48 8B 81 ? ? ? ? 33 D2 EB
                            FSeek(startof(DataOffsets) + DataOffsets[j]);
                            
                            local int typeNum = ReadInt();
                            if (typeNum == 1)
                            {
                                struct
                                {
                                    // NOTE: not read in full yet
                                    int Type;
                                    int field_0x04;
                                    int field_0x08;
                                    int field_0x0C;
                                    int Offset0x10 <format=hex, fgcolor=cRed>;
                                    int Count0x14; // Related to eid? when type = 9?
                                    int field_0x18;
                                    int field_0x1C <format=hex, fgcolor=cRed>;
                                    int field_0x20;
                                    int field_0x24;
                                    AssetRef AssetRef0x28; // 1009
                                    int field_0x30;
                                    float field_0x34;
                                    int field_0x38;
                                    int PhysicsObjectSoundId;
                                    int field_0x40;
                                    AssetRef AssetRef0x44; // 1007
                                    byte field_0x4C;
                                    byte field_0x4D;
                                    byte field_0x4E;
                                    byte field_0x4F;
                                    int field_0x50;
                                    int field_0x54;
                                    int field_0x58;
                                    int field_0x5C;
                                    int field_0x60;
                                    int UnkHavokFileHeaderOffset <format=hex, fgcolor=cRed>;
                                    int UnkHavokFileHeaderSize <format=hex>;
                                    int UnkHavokFileHeaderOffset2 <format=hex, fgcolor=cRed>;
                                    int UnkHavokFileHeaderSize2 <format=hex>;
                                    int UnkHavokFileHeaderOffset3 <format=hex, fgcolor=cRed>;
                                    int UnkHavokFileHeaderSize3 <format=hex>;
                                    int UnkBonamikBinaryHeaderOffset <format=hex, fgcolor=cRed>;
                                    int UnkBonamikBinaryHeaderSize <format=hex>;
                                    int field_0x84 <format=hex, fgcolor=cRed>;
                                    int field_0x88 <format=hex, fgcolor=cRed>;
                                    
                                    if (UnkHavokFileHeaderSize)
                                    {
                                        FSeek(startof(this) + UnkHavokFileHeaderOffset);
                                        byte UnkHavokFileHeader[UnkHavokFileHeaderSize] <bgcolor=cYellow>;
                                    }
                                    
                                    if (UnkHavokFileHeaderSize2)
                                    {
                                        FSeek(startof(this) + UnkHavokFileHeaderOffset2);
                                        byte UnkHavokFileHeader2[UnkHavokFileHeaderSize2] <bgcolor=cYellow>;
                                    }
                                    
                                    if (UnkHavokFileHeaderSize3)
                                    {
                                        FSeek(startof(this) + UnkHavokFileHeaderOffset3);
                                        byte UnkHavokFileHeader3[UnkHavokFileHeaderSize3] <bgcolor=cYellow>;
                                    }
                                    
                                    if (UnkBonamikBinaryHeaderOffset)
                                    {
                                        FSeek(startof(this) + UnkBonamikBinaryHeaderOffset);
                                        byte UnkBonamikBinaryHeader[UnkBonamikBinaryHeaderSize] <bgcolor=cYellow>;
                                    }
                                    
                                    FSeek(startof(Offset0x10) + Offset0x10);
                                    struct
                                    {
                                         int Offsets0x10[Count0x14] <format=hex, fgcolor=cRed>;
                                         local int j = 0;
                                         for (j = 0; j < Count0x14; j++)
                                         {
                                              FSeek(startof(Offsets0x10) + Offsets0x10[j]);
                                              struct
                                              {
                                                   int DataOffset <format=hex, fgcolor=cRed>;
                                                   
                                                   FSeek(startof(DataOffset) + DataOffset);
                                                   struct
                                                   {
                                                        int field_0x00;
                                                        int CollisionLayerPresetId; // 1, 3, 6, 15, 21 handled separately
                                                        int field_0x08;
                                                        int field_0x0C;
                                                        int field_0x10;
                                                        int field_0x14;
                                                        int field_0x18;
                                                        int field_0x1C;
                                                        int field_0x20;
                                                        int field_0x24;
                                                        int field_0x28;
                                                        int field_0x2C;
                                                        int field_0x30;
                                                        int field_0x34;
                                                        int field_0x38;
                                                        int field_0x3C;
                                                   } EntryData <bgcolor=cDkRed>;
                                                   
                                                   FSeek(DataOffset + 0x04);
                                              } Entry;
                                         }
                                    } Struct_0x10 <bgcolor=cRed>;
                                } Type1;
                            }
                            else if (typeNum == 9)
                            {
                                struct
                                {
                                    int Type;
                                    int Count_0x04;
                                    int field_0x08;
                                    int field_0x0C;
                                    int EidDefOffset <format=hex, fgcolor=cRed>;
                                    int EidDefCount;
                                    
                                    local int j = 0;
                                    for (j = 0; j < EidDefCount; j++)
                                    {
                                        FSeek(startof(this) + EidDefOffset + (j * 0x2C));
                                        struct
                                        {
                                            // E8 ? ? ? ? 48 8D 4C 24 ? 4D 8B C6
                                            // nearly same as entries in chara collision files (.ccb)
                                            int Unused;
                                            int Unused2;
                                            int JointNameOffset <format=hex, fgcolor=cRed>;
                                            Vector3 field_0x0C;
                                            Vector3 field_0x18;
                                            int EidId; // Set it as eid of this value
                                            int field_0x28;
                                            
                                            FSeek(startof(this) + JointNameOffset);
                                            string Name;
                                        } EidDataDef <read=EidId, bgcolor=cRed>;
                                    }
                                } Type9;
                            }
                        }
                        
                    } ModelExternalContent <bgcolor=cDkPurple>;
                } ModelExternalContentUnion;
                FSeek(startof(ModelExternalContentUnion) + AlignValue(MeshContentsHeaderUnion.MeshContentsHeader.ModelExternalContentSize, 0x10));
            }
            
            if (MeshContentsHeaderUnion.MeshContentsHeader.JointCount)
            {
                struct
                {
                    Vector3 Min;
                    Vector3 Max;
                    int Padding[2];
                } JointBoundings[MeshContentsHeaderUnion.MeshContentsHeader.JointCount] <bgcolor=cLtAqua>;
            }
            
            if (MeshContentsHeaderUnion.MeshContentsHeader.JointCount)
            {
                // handled by 48 8B C4 48 83 EC ? C5 FA 10 51 - used by not just models
                float JointMaxBounds[6] <bgcolor=cDkAqua>;
                FSeek(startof(JointMaxBounds) + AlignValue(0x18, 0x10));
            }
            
            if (MeshContentsHeaderUnion.MeshContentsHeader.StringTableSize)
            {
                byte StringTable[MeshContentsHeaderUnion.MeshContentsHeader.StringTableSize] <bgcolor=cGray>;
                FSeek(AlignValue(FTell(), 0x10));
            }
            
            if (ModelFileHeaderUnion.ModelFileHeader.field_0x16_bitflags & 1)
            {
                byte EntryData9[0x18];
                FSeek(AlignValue(FTell(), 0x10));
            }
        } MeshContentsToc;
    } MeshContentsTocUnion;
    
    local int meshCnt = ModelFileHeaderUnion.ModelFileHeader.MainMeshCount;
    local int i = 0;
    for (i = 0; i < meshCnt; i++)
    {
        struct
        {
            FSeek(headerSize + ModelFileHeaderUnion.ModelFileHeader.VertexBufferOffsets[i]);
            byte CompressedVertexData[ModelFileHeaderUnion.ModelFileHeader.VertexBufferSizes[i]] <comment="GDeflate", bgcolor=cGreen>;
            
            FSeek(headerSize + ModelFileHeaderUnion.ModelFileHeader.IndexBufferOffsets[i]);
            byte CompressedIndicesData[ModelFileHeaderUnion.ModelFileHeader.IndexBufferSizes[i]] <comment="GDeflate", bgcolor=cBlue>;
        } MeshBuffer;
    }
    
    if (exists(ModelFileHeaderUnion.ModelFileHeader.UnkOffset1) && ModelFileHeaderUnion.ModelFileHeader.UnkOffset1)
    {
        FSeek(headerSize + ModelFileHeaderUnion.ModelFileHeader.UnkOffset1);
        byte UnkData1[ModelFileHeaderUnion.ModelFileHeader.UnkSize1] <comment="GDeflate - may not always be compressed?", bgcolor=cGray>;
    }
    
    if (exists(ModelFileHeaderUnion.ModelFileHeader.UnkOffset2) && ModelFileHeaderUnion.ModelFileHeader.UnkOffset2)
    {
        FSeek(headerSize + ModelFileHeaderUnion.ModelFileHeader.UnkOffset2);
        byte UnkData2[ModelFileHeaderUnion.ModelFileHeader.UnkSize2] <comment="GDeflate - may not always be compressed?", bgcolor=cBlack>;
    }
} Model;
