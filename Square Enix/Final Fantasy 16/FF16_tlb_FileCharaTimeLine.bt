//------------------------------------------------
//--- 010 Editor v15.0 Binary Template
//
//      File: Final Fantasy 16 / FFXVI File Chara Timeline ('FCTL')
//   Authors: Nenkai
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 46 43 54 4C
//  ID Bytes: *.tlb
//   History: 
//------------------------------------------------

/* File is used for *.tlb files, responsible for character/enemy/entity fight moves/timelines.
 *
 * Not complete, there's a LOT of different union/struct/timeline elements.
 * 
 * If you are expanding this to support more union types, 
 * Make sure that byte coverage is correct, especially strings. Make sure not to miss
 * any string offsets.
 * 
 * If the union has a nested struct or a string pointer, make sure to add something like
 * -> FSeek(startof(field_0x00) + <size of main union block>);
 * 
 * That ensures that 010 Editor will only highlight the union bytes and not all the way to
 * the bottom of the file when selecting unions in template results.
 *
 * Note: String offsets may be relative to either the parent struct's (use UnionType)
 * or other the start of the union's actual data, or even a field before.  
 *
 * You might come across offsets that seeks to the file backwards too.
 *
 * You can try and use CE and search for file bytes (files are stored plain in memory, 
 * same for nex/nxd tables) in order to find out what stuff does/is
 * combined with IDA/Ghidra.
 * 
 * For ids, you could try using these aob sigs:
 * 'Nex::GetTableById' : 45 33 C0 89 54 24 ? 45 8B D0 4C 8B D9 49 B9 ? ? ? ? ? ? ? ? 42 0F B6 44 14 ? 48 B9 ? ? ? ? ? ? ? ? 4C 33 C8 49 FF C2 4C 0F AF C9 49 83 FA ? 72 ? 49 8B 4B ? 49 23 C9 4D 8B 4B ? 48 03 C9 49 8B 44 C9 ? 49 3B 43 ? 74 ? 4D 8B 0C C9 EB ? 49 3B C1 74 ? 48 8B 40 ? 3B 50 ? 75 ? EB ? 49 8B C0 48 85 C0 49 0F 44 43 ? 49 3B 43 ? 74 ? 4C 8B 40
 * 'Nex::SearchRowByKey1' : 48 8B 41 ? 48 85 C0 74 ? 48 83 E8 ? 74 ? 48 83 F8 ? 74 ? 45 33 C9 45 33 C0
 * 'Nex::GetRowPtr' : 48 8B 01 48 BA
 *
 * Also, use fgcolor=cRed for offsets, fgcolor=cGreen for counts. Helps a lot.
*/
        
// 48 83 EC ? 48 8B 05 ? ? ? ? 48 33 C4 48 89 44 24 ? B8 ? ? ? ? C7 44 24 ? ? ? ? ? 89 44 24
typedef struct
{
    int DataOffset <format=hex, fgcolor=cRed>;
    int DataSize <format=hex>;
    float Min;
    float Max;
    
    FSeek(startof(DataOffset) + DataOffset);
    union
    {
        byte DataBytes[DataSize];
        struct
        {
            int KeyframeCount;
            struct
            {
                int FloatCountOrType;
                float FrameOffset;
                float b[FloatCountOrType > 0 ? FloatCountOrType : 1];
            } Keyframe[KeyframeCount] <optimize=false>;
        } Keyframes;
    } KeyframesUnion;
    
    FSeek(startof(DataOffset) + 0x10);
} Curve;

typedef struct
{
    int AssetType;
    int AssetPathOffset;
    
    FSeek(startof(this) + AssetPathOffset);
    string Path;
    
    FSeek(startof(this) + 0x08);   
} AssetRef <read=Str("[%d] %s", AssetType, Path)>;
                
// idlist init & file handles open: 48 89 5C 24 ? 48 89 74 24 ? 55 57 41 54 41 56 41 57 48 8D 6C 24 ? 48 81 EC ? ? ? ? 48 8B 05 ? ? ? ? 48 33 C4 48 89 45 ? 80 B9        
// CharaTimeline initializer: 48 89 5C 24 ? 4C 89 4C 24 ? 4C 89 44 24 ? 55 56 57 41 54 41 55 41 56 41 57 48 83 EC ? 4D 8B F9
// Element creator (ranges): 48 89 5C 24 ? 48 89 74 24 ? 57 48 83 EC ? 41 8B 48 ? B8 ? ? ? ? 49 8B F8
// Element creator (triggers): 40 53 48 83 EC ? 41 8B 48 ? B8 ? ? ? ? 48 8B DA 3B C8 0F 8F ? ? ? ? 0F 84 ? ? ? ? 83 F9 ? 0F 8F ? ? ? ? 0F 84 ? ? ? ? 83 F9 ? 0F 8F ? ? ? ? 0F 84 ? ? ? ? 83 E9 ? 0F 84 ? ? ? ? 83 E9 ? 0F 84 ? ? ? ? 83 E9 ? 0F 84 ? ? ? ? 83 E9 ? 0F 84 ? ? ? ? 83 E9 ? 74

enum TimelineElementType
{    
    kTimelineElem_1 = 1,                               // Range
    kTimelineElem_2 = 2,                               // Range
    kTimelineElem_3 = 3,                               // OneShot
    kTimelineElem_4 = 4,                               // OneShot
    kTimelineElem_5 = 5,                               // Range
    kTimelineElem_6 = 6,                               // OneShot
    kTimelineElem_7 = 7,                               // Range
    kTimelineElem_CameraAnimationRange = 8,            // Range
    kTimelineElem_9 = 9,                               // OneShot
    kTimelineElem_BattleCondition = 10,                // < check. Range
    kTimelineElem_11 = 11,                             // Range
    kTimelineElem_BulletTimeRange = 12,                // Range
    kTimelineElem_13 = 13,                             // OneShot
    kTimelineElem_14 = 14,                             // Range
    kTimelineElem_15 = 15,                             // OneShot
    kTimelineElem_16 = 16,                             // Range
    kTimelineElem_ControlPermission = 17,              // Range
    kTimelineElem_19 = 19,                             // Range
    kTimelineElem_20 = 20,                             // Range
    kTimelineElem_21 = 21,                             // Range
    kTimelineElem_22 = 22,                             // Range
    kTimelineElem_23 = 23,                             // Range
    kTimelineElem_24 = 24,                             // Range
    kTimelineElem_25 = 25,                             // Range
    kTimelineElem_26 = 26,                             // Range
    kTimelineElem_27 = 27,                             // Range
    kTimelineElem_28 = 28,                             // OneShot
    kTimelineElem_29 = 29,                             // Range
    kTimelineElem_30 = 30,                             // Range
    kTimelineElem_PlaySoundTrigger = 31,               // OneShot
    kTimelineElem_AttachWeaponTemporaryRange = 33,     // Range
    kTimelineElem_34 = 34,                             // OneShot
    kTimelineElem_35 = 35,                             // Range
    kTimelineElem_36 = 36,                             // Range
    kTimelineElem_37 = 37,                             // Range
    kTimelineElem_38 = 38,                             // Range
    kTimelineElem_40 = 40,                             // Range
    kTimelineElem_42 = 42,                             // Range
    kTimelineElem_44 = 44,                             // OneShot
    kTimelineElem_ModelSE = 45,                        // OneShot
    kTimelineElem_46 = 46,                             // OneShot
    kTimelineElem_BattleMessageRange = 47,             // Range
    kTimelineElem_48 = 48,                             // Range
    kTimelineElem_49 = 49,                             // Range
    kTimelineElem_50 = 50,                             // Range
    kTimelineElem_EnableDestructorCollision = 51,      // Range
    kTimelineElem_52 = 52,                             // Range
    kTimelineElem_53 = 53,                             // Range
    kTimelineElem_55 = 55,                             // Range
    kTimelineElem_56 = 56,                             // OneShot
    kTimelineElem_PadVibration = 57,                   // OneShot
    kTimelineElem_58 = 58,                             // Range
    kTimelineElem_59 = 59,                             // Range
    kTimelineElem_60 = 60,                             // Range
    kTimelineElem_63 = 63,                             // Range
    kTimelineElem_64 = 64,                             // Range
    kTimelineElem_67 = 67,                             // Range
    kTimelineElem_68 = 68,                             // Range
    kTimelineElem_69 = 69,                             // Range
    kTimelineElem_70 = 70,                             // Range
    kTimelineElem_71 = 71,                             // Range
    kTimelineElem_72 = 72,                             // Range
    kTimelineElem_73 = 73,                             // Range
    kTimelineElem_ControlRejectionRange = 74,          // Range
    kTimelineElem_76 = 76,                             // Range
    kTimelineElem_78 = 78,                             // OneShot
    kTimelineElem_79 = 79,                             // OneShot
    kTimelineElem_80 = 80,                             // Range
    kTimelineElem_81 = 81,                             // Range
    kTimelineElem_82 = 82,                             // Range
    kTimelineElem_83 = 83,                             // OneShot
    kTimelineElem_84 = 84,                             // Range
    kTimelineElem_85 = 85,                             // OneShot
    kTimelineElem_86 = 86,                             // OneShot
    kTimelineElem_87 = 87,                             // Range
    kTimelineElem_88 = 88,                             // OneShot
    
    kTimelineElem_1001 = 1001,                         // Range
    kTimelineElem_1002 = 1002,                         // Range
    kTimelineElem_1003 = 1003,                         // Range
    kTimelineElem_1004 = 1004,                         // Range
    kTimelineElem_1005 = 1005,                         // Range
    kTimelineElem_1006 = 1006,                         // OneShot
    kTimelineElem_1007 = 1007,                         // Range
    kTimelineElem_1008 = 1008,                         // Range
    kTimelineElem_1009 = 1009,                         // Range
    kTimelineElem_TurnToTarget = 1010,                 // Range
    kTimelineElem_1011 = 1011,                         // OneShot
    kTimelineElem_MagicCreate = 1012,                  // OneShot
    kTimelineElem_1013 = 1013,                         // OneShot
    kTimelineElem_1014 = 1014,                         // Range
    kTimelineElem_1015 = 1015,                         // OneShot
    kTimelineElem_PrecedeInputUnk = 1016,              // Range
    kTimelineElem_1017 = 1017,                         // Range
    kTimelineElem_1018 = 1018,                         // Range
    kTimelineElem_1019 = 1019,                         // OneShot
    kTimelineElem_1020 = 1020,                         // Range
    kTimelineElem_1021 = 1021,                         // Range
    kTimelineElem_1022 = 1022,                         // Range
    kTimelineElem_1023 = 1023,                         // OneShot
    kTimelineElem_1024 = 1024,                         // Range
    kTimelineElem_1025 = 1025,                         // OneShot
    kTimelineElem_1026 = 1026,                         // Range
    kTimelineElem_1027 = 1027,                         // OneShot
    kTimelineElem_1028 = 1028,                         // Range
    kTimelineElem_1029 = 1029,                         // OneShot
    kTimelineElem_1030 = 1030,                         // Range
    kTimelineElem_1031 = 1031,                         // OneShot
    kTimelineElem_1032 = 1032,                         // Range
    kTimelineElem_1034 = 1034,                         // Range
    kTimelineElem_1035 = 1035,                         // Range
    kTimelineElem_1037 = 1037,                         // Range
    kTimelineElem_1038 = 1038,                         // OneShot
    kTimelineElem_1039 = 1039,                         // OneShot
    kTimelineElem_1040 = 1040,                         // Range
    kTimelineElem_1041 = 1041,                         // Range
    kTimelineElem_1042 = 1042,                         // Range
    kTimelineElem_1043 = 1043,                         // OneShot
    kTimelineElem_1044 = 1044,                         // OneShot
    kTimelineElem_1045 = 1045,                         // Range
    kTimelineElem_1046 = 1046,                         // Range
    kTimelineElem_SummonPartsVisibleRange = 1047,      // Range
    kTimelineElem_1048 = 1048,                         // OneShot
    kTimelineElem_1049 = 1049,                         // OneShot
    kTimelineElem_1050 = 1050,                         // Range
    kTimelineElem_1051 = 1051,                         // Range
    kTimelineElem_1052 = 1052,                         // Range
    kTimelineElem_BattleVoiceTrigger = 1053,
    kTimelineElem_1053 = 1053,                         // OneShot
    kTimelineElem_1054 = 1054,                         // Range
    kTimelineElem_1055 = 1055,                         // Range
    kTimelineElem_1056 = 1056,                         // Range
    kTimelineElem_1057 = 1057,                         // Range
    kTimelineElem_DisableReceiver = 1058,              // Range
    kTimelineElem_1059 = 1059,                         // Range
    kTimelineElem_1060 = 1060,                         // Range
    kTimelineElem_1061 = 1061,                         // OneShot
    kTimelineElem_1062 = 1062,                         // Range
    kTimelineElem_1063 = 1063,                         // Range
    kTimelineElem_1064 = 1064,                         // Range
    kTimelineElem_1065 = 1065,                         // Range
    kTimelineElem_1066 = 1066,                         // Range
    kTimelineElem_1067 = 1067,                         // Range
    kTimelineElem_1068 = 1068,                         // Range
    kTimelineElem_1070 = 1070,                         // Range
    kTimelineElem_1071 = 1071,                         // OneShot
    kTimelineElem_1072 = 1072,                         // OneShot
    kTimelineElem_1073 = 1073,                         // Range
    kTimelineElem_1074 = 1074,                         // OneShot
    kTimelineElem_1075 = 1075,                         // Range
    kTimelineElem_1077 = 1077,                         // OneShot
    kTimelineElem_1078 = 1078,                         // Range
    kTimelineElem_1079 = 1079,                         // Range
    kTimelineElem_1080 = 1080,                         // OneShot
    kTimelineElem_1081 = 1081,                         // Range
    kTimelineElem_1082 = 1082,                         // OneShot
    kTimelineElem_1083 = 1083,                         // Range
    kTimelineElem_1084 = 1084,                         // Range
    kTimelineElem_1085 = 1085,                         // Range
    kTimelineElem_1086 = 1086,                         // Range
    kTimelineElem_1087 = 1087,                         // Range
    kTimelineElem_1088 = 1088,                         // OneShot
    kTimelineElem_1089 = 1089,                         // Range
    kTimelineElem_1091 = 1091,                         // OneShot
    kTimelineElem_1092 = 1092,                         // Range
    kTimelineElem_1093 = 1093,                         // Range
    kTimelineElem_1094 = 1094,                         // OneShot
    kTimelineElem_1095 = 1095,                         // Range
    kTimelineElem_1096 = 1096,                         // Range
    kTimelineElem_DisableCharaUnk = 1097,              // Range
    kTimelineElem_1098 = 1098,                         // Range
    kTimelineElem_1099 = 1099,                         // Range
    kTimelineElem_1100 = 1100,                         // OneShot
    kTimelineElem_1101 = 1101,                         // OneShot
    kTimelineElem_1102 = 1102,                         // Range
    kTimelineElem_1103 = 1103,                         // Range
    kTimelineElem_1104 = 1104,                         // Range
    kTimelineElem_1105 = 1105,                         // Range
    kTimelineElem_1106 = 1106,                         // Range
    kTimelineElem_1107 = 1107,                         // Range
    kTimelineElem_1108 = 1108,                         // Range
    kTimelineElem_1109 = 1109,                         // Range
    kTimelineElem_1110 = 1110,                         // OneShot
    kTimelineElem_1111 = 1111,                         // Range
    kTimelineElem_1113 = 1113,                         // Range
    kTimelineElem_1114 = 1114,                         // OneShot
    kTimelineElem_1115 = 1115,                         // Range
    kTimelineElem_1116 = 1116,                         // Range
    ActionEventTrigger = 1117,                         // OneShot
    kTimelineElem_1118 = 1118,                         // OneShot
    kTimelineElem_1119 = 1119,                         // OneShot
    kTimelineElem_1120 = 1120,                         // Range
    kTimelineElem_1121 = 1121,                         // Range
    kTimelineElem_1122 = 1122,                         // Range
    kTimelineElem_1123 = 1123,                         // Range
    kTimelineElem_1124 = 1124,                         // OneShot
    kTimelineElem_1125 = 1125,                         // OneShot
    kTimelineElem_1126 = 1126,                         // OneShot
    kTimelineElem_1127 = 1127,                         // Range
    kTimelineElem_1129 = 1129,                         // Range
    kTimelineElem_1130 = 1130,                         // Range
    kTimelineElem_1131 = 1131,                         // OneShot
    kTimelineElem_1132 = 1132,                         // OneShot
    kTimelineElem_1133 = 1133,                         // Range
    kTimelineElem_1134 = 1134,                         // OneShot
    kTimelineElem_1135 = 1135,                         // OneShot
    kTimelineElem_1136 = 1136,                         // OneShot
    kTimelineElem_1137 = 1137,                         // Range
    
    kTimelineElem_3082 = 3082,                         // Range
    kTimelineElem_3104 = 3104,                         // OneShot
    kTimelineElem_3109 = 3109,                         // OneShot
    kTimelineElem_3135 = 3135,                         // Range
};

typedef struct
{
    TimelineElementType UnionType;
    int field_0x04;
    int field_0x08;
    int field_0x0C;
    
    struct
    {
        switch (UnionType)
        {
            case kTimelineElem_5:
                {
                    // 48 89 5C 24 ? 48 89 6C 24 ? 48 89 74 24 ? 57 48 83 EC ? 48 8B E9 E8 ? ? ? ? 48 8B C8 48 8B 10 FF 52 ? 48 8B 0D ? ? ? ? 48 8D 54 24 ? 44 8B C0 E8 ? ? ? ? 48 8D 4C 24 ? E8 ? ? ? ? 48 8B 5C 24 ? 84 C0 0F 84 ? ? ? ? 48 8B CB E8 ? ? ? ? 48 8B F0 48 85 C0 0F 84 ? ? ? ? 48 8B 4D ? 48 63 79 ? 48 03 F9 8B 57
                    byte Bool_0x00;
                    byte Bool_0x01;
                    byte Bool_0x02;
                    byte pad[1];
                    int CharaCollisionShapeId;
                    byte pad_[8];
                };
                break;
            case kTimelineElem_CameraAnimationRange: // 8
                {
                    // E9 ? ? ? ? CC CC CC 48 8B C4 48 89 58 ? 48 89 70 ? 48 89 78 ? 55 48 8B EC 48 83 EC ? C5 F8 29 70
                    int NumFrames;
                    int field_0x04;
                    byte field_0x08;
                    byte field_0x09;
                    byte field_0x0A;
                    byte field_0x0B;
                    Curve PerspectiveX;
                    Curve PerspectiveY;
                    Curve PerspectiveZ;
                    Curve EyeGazeX;
                    Curve EyeGazeY;
                    Curve EyeGazeZ;
                    Curve Twist;
                    Curve FocalLength;
                    int field_0x8C;
                    int field_0x90;
                    float field_0x94;
                    int field_0x98;
                    float field_0x9C;
                    byte field_0xA0;
                    byte field_0xA1;
                    byte field_0xA2;
                    byte field_0xA3;
                    int FramesMaybeField_0xA4;
                    int field_0xA8;
                    float field_0xAC;
                    byte field_0xB0;
                    byte field_0xB1;
                    byte field_0xB2;
                    byte field_0xB3;
                    float field_0xB4;
                    float field_0xB8;
                    byte field_0xBC;
                    byte pad[3];
                };
                break;
             case kTimelineElem_9: // 9
                {
                    // 48 8B C4 48 89 58 ? 48 89 70 ? 48 89 78 ? 55 41 54 41 55 41 56 41 57 48 8D 68 ? 48 81 EC ? ? ? ? 48 8B 05 ? ? ? ? 48 33 C4 48 89 45 ? 4C 8B F9
                    int AttackParamId;
                    int UnkType; // Goes up to 9
                    int field_0x08;
                    int EidId;
                    byte pad[0x20];
                };
                break;
            case kTimelineElem_BattleCondition: // 10
                {
                    // Verified in code
                    // 48 89 5C 24 ? 48 89 74 24 ? 57 48 83 EC ? C5 F8 29 74 24 ? 48 8B F1
                    byte Bool_0x00; // 0x40
                    byte Bool_0x01; // 0x01
                    byte Bool_0x02; // 0x02
                    byte Bool_0x03; // 0x04
                    byte Bool_0x04; // 0x08
                    byte Bool_0x05; // 0x10
                    byte Bool_0x06; // 0x20
                    byte Bool_0x07; // 0x80
                    byte Bool_0x08; // 0x100
                    byte pad[0x03];
                    float field_0x0C;
                    int field_0x10;
                    float field_0x14;
                    byte pad2[0x0C];
                };
                break;
            case kTimelineElem_11:
                {
                    // 48 89 5C 24 ? 57 48 83 EC ? 4C 8B 41 ? 48 8B F9 C5 F8 29 74 24 ? C5 FA 10 35
                    int field_0x00;
                    int field_0x04;
                    int field_0x08;
                    int field_0x0C;
                    int field_0x10;
                    int field_0x14;
                }
                break;
            case kTimelineElem_BulletTimeRange: // 12
                {
                    // 40 53 48 83 EC ? 48 8B D9 E8 ? ? ? ? 84 C0 74 ? 48 8B CB E8 ? ? ? ? 48 8D 4B
                    float field_0x00;
                    float field_0x04;
                    byte Bool_0x08;
                    byte Bool_0x09;
                    byte Bool_0x0A;
                    byte Bool_0x0B;
                    byte Bool_0x0C;
                    byte Bool_0x0D;
                    byte Bool_0x0E;
                    byte Bool_0x0F;
                    int VATBEntryIndexMaybe;
                    byte Bool_0x14;
                    byte pad[0x13];
                };
                break;
            case kTimelineElem_ControlPermission:
                {
                    // 48 89 5C 24 ? 48 89 74 24 ? 57 48 83 EC ? 48 8B D9 E8 ? ? ? ? 8A D0
                    byte Bool0_0x02; // 0x02
                    byte Bool0_0x400; // 0x400
                    byte Bool0_0x80; // 0x80
                    byte Bool0_0x100; // 0x100
                    byte Bool0_0x04; // 0x04
                    byte Bool0_0x08; // 0x08
                    byte Bool0_0x200; // 0x200
                    byte Bool0_0x10; // 0x10
                    byte Bool0_0x20; // 0x20
                    byte Bool0_0x800; // 0x800
                    byte Bool0_0x1000; // 0x1000
                    byte Bool0_0x2000; // 0x2000
                    byte Bool0_0x4000; // 0x4000
                    byte Bool0_0x8000; // 0x8000
                    byte Unk;
                    byte Pad;
                    byte Bool1_0x02; // 0x02
                    byte Bool1_0x400; // 0x400
                    byte Unk;
                    byte Bool1_0x80; // 0x80
                    byte Bool1_0x100; // 0x100
                    byte Bool1_0x4; // 0x04
                    byte Bool1_0x08; // 0x08
                    byte Bool1_0x200; // 0x200
                    byte Bool1_0x10; // 0x10
                    byte Bool1_0x20; // 0x20
                    byte Bool1_0x800; // 0x800
                    byte Bool1_0x1000; // 0x1000
                    byte Bool1_0x2000; // 0x2000
                    byte Bool1_0x4000; // 0x4000
                    byte Bool1_0x8000; // 0x8000
                    byte pad_;
                };
                break;
            case 23:
                {
                    // Verified in code
                    // 40 53 48 83 EC ? 48 83 C1 ? E8 ? ? ? ? 48 8B C8 48 8B 10 FF 52 ? 48 8B 0D ? ? ? ? 48 8D 54 24 ? 44 8B C0 E8 ? ? ? ? 48 8D 4C 24 ? E8 ? ? ? ? 48 8B 5C 24 ? 84 C0 74 ? 48 8B CB E8 ? ? ? ? 48 85 C0 74 ? 83 88
                    byte pad[0x20];
                };
                break;
            case kTimelineElem_24:
                {
                    // Verified in code
                    // 40 53 48 83 EC ? E8 ? ? ? ? 48 85 C0 74 ? 48 8B 10 48 8B C8 FF 52 ? 48 8B 0D ? ? ? ? 48 8D 54 24 ? 44 8B C0 E8 ? ? ? ? 48 8D 4C 24 ? E8 ? ? ? ? 48 8B 5C 24 ? 84 C0 74 ? 48 8B CB E8 ? ? ? ? 48 85 C0 74 ? 48 83 88
                    byte pad[0x20];
                };
                break;
            case 27: // Sound related?
                {
                    // 40 53 48 83 EC ? 48 8B D9 E8 ? ? ? ? 48 85 C0 74 ? 48 8B C8 E8 ? ? ? ? 48 85 C0 74 ? 4C 8B 43
                    byte Bool_0x00;
                    byte pad[0x07];
                };
                break;
                
            case 30:
                {
                    AssetRef Anim <format=hex, fgcolor=cRed>;
                    int field_0x08;
                    byte field_0x0C;
                    byte pad[3];
                    int field_0x10;
                    int field_0x14;
                    double field_0x18;
                    double field_0x20;
                    double field_0x28;
                    int field_0x30;
                    int field_0x34;
                    int field_0x38;
                    float field_0x3C;
                    byte field_0x40;
                    byte pad_[3];
                    float field_0x44;
                    int field_0x48;
                    int field_0x4C;
                    int empty[4];

                    FSeek(startof(field_0x00) + 0x60);
                };
                break;
            case kTimelineElem_PlaySoundTrigger: // 31
                {
                    // 48 8B C4 48 89 58 ? 55 56 57 41 56 41 57 48 8D 68 ? 48 81 EC ? ? ? ? 48 83 65
                    AssetRef Sound <format=hex, fgcolor=cRed>;
                    int field_0x08;
                    byte field_0x0C;
                    byte pad[3];
                    int field_0x10;
                    int SabEntryIndexMaybe;
                    double field_0x18;
                    double field_0x20;
                    double field_0x28;
                    int field_0x30;
                    int PlayVfxTriggerSetId;
                    int field_0x38;
                    float field_0x3C;
                    byte Bool_0x40;
                    byte pad_[3];
                    float field_0x44;
                    int field_0x48;
                    int field_0x4C;
                    int empty[4];

                    FSeek(startof(field_0x00) + 0x60);
                };
                break;
            case kTimelineElem_AttachWeaponTemporaryRange: // 33
                {
                    // 48 89 5C 24 ? 48 89 74 24 ? 57 48 83 EC ? 48 8B F9 E8 ? ? ? ? 48 8B C8 48 8B 10 FF 52 ? 48 8B 0D ? ? ? ? 48 8D 54 24 ? 44 8B C0 E8 ? ? ? ? 48 8D 4C 24 ? E8 ? ? ? ? 48 8B 5C 24 ? 84 C0 74 ? 48 8B CB E8 ? ? ? ? 48 85 C0 74 ? 48 8B 80
                    int field_0x00;
                    int field_0x04;
                };
                break;
            case kTimelineElem_ModelSE:
                {
                    // Verified in game code
                    int SEIndex; // SE Index in sab file?
                    byte bool_0x04;
                    byte pad[3];
                    int SoundPathOffset <format=hex, fgcolor=cRed>;
                    int field_0x0C;
                    double field_0x10;
                    double field_0x18;
                    double field_0x20;
                    int field_0x28;
                    float field_0x2C;
                    float field_0x30;
                    float field_0x34;
                    int field_0x38;
                    float field_0x3C;
                    int field_0x40;
                    int field_0x44;
                    
                    FSeek(startof(field_0x00) + SoundPathOffset);
                    string Path <bgcolor=cGray>;
                    
                    FSeek(startof(SEIndex) + 0x58);
                };
                break;
            case kTimelineElem_BattleMessageRange: // 47
                {
                    // 48 89 5C 24 ? 48 89 74 24 ? 57 48 83 EC ? 48 8B 41 ? 48 8B F9 48 63 58
                    int BattleMessageId;
                    int pad[8];
                };
                break;
            case kTimelineElem_49:
                {
                    int MSeqInputId;
                };
                break;
            case kTimelineElem_56: // Also pad vibration
            case kTimelineElem_PadVibration: // 57
                {
                    // 48 8B C4 48 89 58 ? 48 89 70 ? 48 89 78 ? 55 41 54 41 55 41 56 41 57 48 8D A8 ? ? ? ? 48 81 EC ? ? ? ? 48 8B 05 ? ? ? ? 48 33 C4 48 89 85 ? ? ? ? 48 8B D9 E8 ? ? ? ? 33 FF
                    int CameraFCurveId;
                    int UnkOffset1 <format=hex, fgcolor=cRed>;
                    int field_0x08;
                    int UnkOffset2 <format=hex, fgcolor=cRed>;
                    int field_0x10;
                    int UnkOffset3 <format=hex, fgcolor=cRed>;
                    int field_0x18;
                    int field_0x1C;
                    float field_0x20;
                    int field_0x24;
                    double field_0x28;
                    float field_0x30;
                    int field_0x34;
                    
                    FSeek(startof(UnionType) + UnkOffset1);
                    string Name1 <bgcolor=cGray>;
                    
                    FSeek(startof(UnionType) + UnkOffset2);
                    string Name2 <bgcolor=cGray>;
                    
                    FSeek(startof(UnionType) + UnkOffset3);
                    string Name3 <bgcolor=cGray>;
                };
                break;
            case kTimelineElem_EnableDestructorCollision:
                {
                    // Verified in code
                    // 48 89 5C 24 ? 57 48 81 EC ? ? ? ? 48 8B 05 ? ? ? ? 48 33 C4 48 89 84 24 ? ? ? ? 48 8B F9 E8 ? ? ? ? 33 DB 48 85 C0 74 ? 48 8B 10 48 8B C8 FF 52 ? 48 8B 15 ? ? ? ? 48 8B 0D ? ? ? ? 48 8B 8C D1 ? ? ? ? 8B D0 4C 8B 01 41 FF 50 ? 48 85 C0 74 ? 48 8B 4F ? 44 8D 4B ? 4C 8D 44 24 ? 48 63 51 ? 48 03 D1 48 8B C8 E8 ? ? ? ? 48 8B F8 48 85 C0 74 ? 48 8B 4C DC ? 83 79 ? ? 75 ? 48 83 C1 ? 41 B0
                    int AnimPathOffset <format=hex, fgcolor=cRed>;
                    byte pad[4];
                    
                    FSeek(startof(UnionType) + AnimPathOffset);
                    string Path <bgcolor=cGray>;
                    
                    FSeek(startof(AnimPathOffset) + 0x08);
                };
                break;
            case 60:
                {
                    int field_0x00;
                    int UnkName1Offset <format=hex, fgcolor=cRed>;
                    int field_0x08;
                    int UnkName2Offset <format=hex, fgcolor=cRed>;
                    int field_0x10;
                    int UnkName3Offset <format=hex, fgcolor=cRed>;
                    int field_0x18;
                    int field_0x1C;
                    int field_0x20;
                    int field_0x24;
                    int field_0x28;
                    int field_0x2C;
                    int field_0x30;
                    int field_0x34;
                    int field_0x38;
                    int field_0x3C;
                    
                    FSeek(startof(UnionType) + UnkName1Offset);
                    string Name1 <bgcolor=cGray>;
                    
                    FSeek(startof(UnionType) + UnkName2Offset);
                    string Name2 <bgcolor=cGray>;
                    
                    FSeek(startof(UnionType) + UnkName3Offset);
                    string Name3 <bgcolor=cGray>;
                    FSeek(startof(field_0x00) + 0x40);
                };
                break;
            case 73:
                {
                    int field_0x00;
                    int UnkName1Offset <format=hex, fgcolor=cRed>;
                    int field_0x08;
                    int UnkName2Offset <format=hex, fgcolor=cRed>;
                    int field_0x10;
                    int UnkName3Offset <format=hex, fgcolor=cRed>;
                    int field_0x18;
                    int field_0x1C;
                    int field_0x20;
                    int field_0x24;
                    int field_0x28;
                    int field_0x2C;
                    int field_0x30;
                    int field_0x34;
                    int field_0x38;
                    int field_0x3C;
                    
                    FSeek(startof(UnionType) + UnkName1Offset);
                    string Name1 <bgcolor=cGray>;
                    
                    FSeek(startof(UnionType) + UnkName2Offset);
                    string Name2 <bgcolor=cGray>;
                    
                    FSeek(startof(UnionType) + UnkName3Offset);
                    string Name3 <bgcolor=cGray>;
                    FSeek(startof(field_0x00) + 0x40);
                };
                break;
            case 84:
                {
                    local int k = 0;
                    for (k = 0; k < 9; k++)
                    {
                        struct
                        {
                            int DataOffset <format=hex, fgcolor=cRed>;
                            int DataSize <format=hex>;
                            float field_0x08;
                            float field_0x0C;
                            
                            FSeek(startof(DataOffset) + DataOffset);
                            byte Data[DataSize];
                            
                            FSeek(startof(DataOffset) + 0x10);
                        } Entry;
                    }
                    
                    int Unk;
                    int unks[4];
                };
                break;
            case kTimelineElem_ControlRejectionRange: // 74
                {
                    // 48 89 5C 24 ? 48 89 6C 24 ? 48 89 74 24 ? 57 48 83 EC ? 48 8B E9 E8 ? ? ? ? 48 8B C8 48 8B 10 FF 52 ? 48 8B 0D ? ? ? ? 48 8D 54 24 ? 44 8B C0 E8 ? ? ? ? 48 8D 4C 24 ? E8 ? ? ? ? 48 8B 5C 24 ? 84 C0 0F 84 ? ? ? ? 48 8B CB E8 ? ? ? ? 48 8B F0 48 85 C0 0F 84 ? ? ? ? 48 8B 4D ? 48 63 79 ? 48 03 F9 8B 47
                    int field_0x00; // checks for 1? 
                    byte field_0x04;
                    byte field_0x05;
                    byte field_0x06;
                    byte field_0x07;
                    byte field_0x08;
                    byte field_0x09;
                    byte field_0x0A;
                    byte field_0x0B;
                    byte field_0x0C;
                    byte field_0x0D;
                    byte field_0x0E;
                    byte field_0x0F;
                    byte field_0x10;
                    byte field_0x11;
                    byte field_0x12; // Might be aside
                    byte pad[0x09];
                };
                break;
            case kTimelineElem_1001: // Seems shared across timelines - 1033, 1060, 1035
                {
                    // Verified in code
                    AssetRef Anim <format=hex, fgcolor=cRed>;
                    byte Bool_0x08;
                    byte Bool_0x09;
                    byte Bool_0x0A;
                    byte pad[1];
                    float Float_0x0C;
                    byte Bool_0x10;
                    byte Bool_0x11;
                    byte Bool_0x12;
                    byte pad;
                    byte Padding[0x18];
                };
                break;
            case 1002:
                {
                    // 48 89 5C 24 ? 48 89 6C 24 ? 48 89 74 24 ? 57 41 56 41 57 48 83 EC ? 48 8B E9 E8
                    int AttackParamId;
                    int NameOffset <format=hex, fgcolor=cRed>;
                    byte field_0x08;
                    byte pad[3];
                    int field_0x0C;
                    int UnkName2Offset <format=hex, fgcolor=cRed>;
                    int field_0x14;
                    byte field_0x18;
                    byte pad_[0x03];
                    int field_0x1C;
                    int field_0x20;
                    int field_0x24;
                    
                    FSeek(startof(UnionType) + NameOffset);
                    string Name <bgcolor=cGray>;
                    
                    FSeek(startof(UnionType) + UnkName2Offset);
                    string Name2 <bgcolor=cGray>;
                    
                    FSeek(startof(AttackParamId) + 0x28);
                };
                break;
                
            case kTimelineElem_1004:
                {
                    // 40 53 48 83 EC ? 48 8B D9 48 83 C1 ? E8 ? ? ? ? 48 8B C8 E8 ? ? ? ? 48 8B 4B ? 8B 51 ? 89 90
                    int field_0x00;
                    float field_0x04;
                    float field_0x08;
                    byte pad[0x18];
                };
                break;
            case 1005: // Unsupported? vtable has no exec entry
                {
                    int field_0x00;
                    int field_0x04;
                    int field_0x08;
                    int field_0x0C;
                    int field_0x10;
                    int field_0x14;
                    int field_0x18;
                    int field_0x1C;
                    int field_0x20;
                };
                break;
                
            case 1007:
                {
                    byte Flag;
                    byte pad[0x1F];
                };
                break;
                
            case 1008:
                // 40 53 48 83 EC ? 48 83 C1 ? E8 ? ? ? ? 48 8B C8 E8 ? ? ? ? 48 8B 0D ? ? ? ? 48 8D 54 24 ? 44 8B 40 ? E8 ? ? ? ? 48 8D 4C 24 ? E8 ? ? ? ? 48 8B 5C 24 ? 84 C0 74 ? 48 8B CB E8 ? ? ? ? 48 85 C0 74 ? B2
                break;
            case 1009:
                {
                    // 48 83 EC ? 48 83 C1 ? E8 ? ? ? ? 48 8B C8 48 8B 10 FF 52 ? 48 8B 15 ? ? ? ? 48 8B 0D ? ? ? ? 48 8B 8C D1 ? ? ? ? 8B D0 4C 8B 01 41 FF 50 ? 48 85 C0 74 ? 48 8B 88 ? ? ? ? 48 8B 01 FF 50 ? 48 83 C4 ? C3 48 83 EC
                    byte pad[0x20];
                };
                break;
                
            case kTimelineElem_TurnToTarget: // 1010
                {
                    // 40 53 48 83 EC ? 4C 8B 41 ? 48 8B D9 C5 F8 29 74 24 ? 41 8B 48
                    int Type; // 0, 1, 2
                    int TargetType <format=hex, fgcolor=cRed>; // 0, 1, 2
                    // 48 89 5C 24 ? 48 89 6C 24 ? 48 89 74 24 ? 57 48 83 EC ? 48 8B EA 48 8B 51
                    int LayoutInstanceId; // when target type 1? layout instance id?
                    float field_0x0C;
                    int field_0x10;
                    float field_0x14;
                    float field_0x18;
                    int UnkType;
                    float field_0x20;
                    byte pad[0x18];
                };
                break;
            case kTimelineElem_MagicCreate: // 1012
                {
                    // 48 89 5C 24 ? 48 89 74 24 ? 48 89 7C 24 ? 55 41 54 41 55 41 56 41 57 48 8D 6C 24 ? 48 81 EC ? ? ? ? 48 8B 05 ? ? ? ? 48 33 C4 48 89 45 ? 48 8B 41
                    int Unused;
                    int UnkId; // hardcoded checks on 1602/1603 and 821/822
                    byte Bool_0x08;
                    byte field_0x09;
                    byte pad[0x1E];                    
                    FSeek(startof(Unused) + 0x28);
                };
                break;
            case 1014:
                {
                    // 40 53 48 83 EC ? 48 8B D9 E8 ? ? ? ? 48 85 C0 74 ? 48 8B 10 48 8B C8 FF 52 ? 4C 8B 05 ? ? ? ? 48 8B 15 ? ? ? ? 4A 8B 8C C2 ? ? ? ? 8B D0 4C 8B 01 41 FF 50 ? 48 85 C0 74 ? 48 8B 88
                    int UnkType; // No more than 0x1F (bitset)
                    byte pad[0x1C];
                };
                break;
            case kTimelineElem_PrecedeInputUnk: // 1016
                {
                    // 48 89 5C 24 ? 57 48 83 EC ? 48 8B F9 48 83 C1 ? E8 ? ? ? ? 48 8B C8 48 8B 10 FF 52 ? 48 8B 15
                    byte field_0x00;
                    byte field_0x01;
                    byte field_0x02;
                    byte field_0x03;
                    byte field_0x04;
                    byte field_0x05;
                    byte pad[2];
                    int Unk1;
                    int Unk2;
                    int Unk3;
                    byte pad_[8];
                };
                break;
            case kTimelineElem_1023:
                {
                    // 48 89 5C 24 ? 48 89 74 24 ? 48 89 7C 24 ? 55 41 56 41 57 48 8B EC 48 83 EC ? 48 8B 05 ? ? ? ? 48 33 C4 48 89 45 ? 4C 8B F1
                    int Offset_0x00 <format=hex, fgcolor=cRed>;
                    int Count_0x00;
                    int field_0x08 <format=hex, fgcolor=cRed>;
                    int field_0x0C;
                    AssetRef VFX <format=hex, fgcolor=cRed>;
                    AssetRef Se <format=hex, fgcolor=cRed>;
                    int field_0x20;
                    int field_0x24;
                    int field_0x28;
                    int field_0x2C;
                    int field_0x30;
                    int PlayVfxTriggerSetIdMaybe;
                    int field_0x38;
                    int field_0x3C;
                    int field_0x40;
                    int field_0x44;
                    int field_0x48;
                    int field_0x4C;
                    int field_0x50;
                    
                    FSeek(startof(Offset_0x00) + Offset_0x00);
                    struct
                    {
                        int Active;
                        int UnkIdSlot;
                        int EidId1 <comment="This is used if EidId2 is 0.">;
                        int EidId2;
                        double field_0x10;
                        double field_0x18;
                        double field_0x20;
                        double field_0x28;
                        float field_0x30;
                        float field_0x34;
                        int pad[8];
                    } Sub[Count_0x00];
                    
                    FSeek(startof(this) + 0x54);

                };
                break;
            case 1030:
                {
                    // 48 89 5C 24 ? 48 89 74 24 ? 48 89 7C 24 ? 55 48 8B EC 48 81 EC ? ? ? ? 48 8B 05 ? ? ? ? 48 33 C4 48 89 45 ? 48 8B F9
                    int Offset_0x00 <format=hex, fgcolor=cRed>;
                    int Count_0x00 <fgcolor=cGreen>;
                    int Offset_0x08 <format=hex, fgcolor=cRed>; // 0x1C Stride
                    int Count_0x08 <fgcolor=cGreen>; // vfxexternallist
                    AssetRef VFX <format=hex, fgcolor=cRed>;
                    AssetRef Se <format=hex, fgcolor=cRed>;
                    byte Flags_0x20;
                    byte pad[3];
                    byte field_0x24;
                    byte field_0x25;
                    byte field_0x26;
                    byte field_0x27;
                    int field_0x28;
                    int field_0x2C;
                    int field_0x30;
                    int UnkNameOffset3 <format=hex, fgcolor=cRed, comment="Relative to Union">; // vatb
                    int PlayVfxTriggerSetIdMaybe;
                    int field_0x3C;
                    int field_0x40;
                    int field_0x44;
                    int field_0x48;
                    int field_0x4C;
                    int field_0x50;
                    
                    FSeek(startof(Offset_0x00) + Offset_0x00);
                    struct
                    {
                        int Active;
                        int UnkIdSlot;
                        int EidId1 <comment="This is used if EidId2 is 0.">;
                        int EidId2;
                        double field_0x10;
                        double field_0x18;
                        double field_0x20;
                        double field_0x28;
                        float field_0x30;
                        float field_0x34;
                        int pad[8];
                    } Sub[Count_0x00];

                    FSeek(startof(UnionType) + UnkNameOffset3);
                    string UnkName3 <bgcolor=cGray>;
                    
                    FSeek(startof(Offset_0x00) + 0x54);
                }
                break;
            case 1035: // Inherits from 1001?
                {
                    // 40 53 48 83 EC ? 48 8B D9 E8 ? ? ? ? 48 8B 83 ? ? ? ? 8A 50 ? F6 DA 1B C0 83 C0 ? 89 83 ? ? ? ? 48 83 C4 ? 5B C3 CC 83 A1 ? ? ? ? ? E9 ? ? ? ? 48 8B 91
                    AssetRef Anim <format=hex, fgcolor=cRed>;
                    byte Bool_0x08;
                    byte Bool_0x09;
                    byte Bool_0x0A;
                    byte pad[1];
                    float Float_0x0C;
                    byte Bool_0x10;
                    byte Bool_0x11;
                    byte Bool_0x12;
                    byte pad;
                    byte Padding[0x18];

                    FSeek(startof(Anim) + 0x20);
                };
                break;
            case kTimelineElem_SummonPartsVisibleRange: // 1047
                {
                    // 48 8B C4 48 89 58 ? 48 89 70 ? 55 57 41 54 41 56 41 57 48 8B EC 48 83 EC ? C5 F8 29 70 ? C5 F8 29 78 ? C5 78 29 40
                    int SummonPartsPatternId;
                    float field_0x04;
                    float field_0x08;
                    byte field_0x0C;
                    byte field_0x0D;
                    byte field_0x0E;
                    byte field_0x0F;
                    float field_0x10;
                };
                break;
            case 1049:
                {
                    int Offset_0x00 <format=hex, fgcolor=cRed>;
                    int Count_0x00 <fgcolor=cGreen>;
                    int Offset_0x08 <format=hex, fgcolor=cRed>; // 0x1C Stride
                    int Count_0x08 <fgcolor=cGreen>; // vfxexternallist
                    AssetRef VFX <format=hex, fgcolor=cRed>;
                    AssetRef Se <format=hex, fgcolor=cRed>;
                    int field_0x20;
                    byte field_0x24;
                    byte field_0x25;
                    byte field_0x26;
                    byte field_0x27;
                    int field_0x28;
                    int field_0x2C;
                    int field_0x30;
                    int field_0x34 <format=hex, fgcolor=cRed, comment="Relative to Union">;
                    int field_0x38;
                    int field_0x3C;
                    int field_0x40;
                    int field_0x44;
                    int field_0x48;
                    int field_0x4C;
                    int field_0x50;

                    FSeek(startof(Offset_0x00) + Offset_0x00);
                    struct
                    {
                        int Active;
                        int UnkIdSlot;
                        int EidId1 <comment="This is used if EidId2 is 0.">;
                        int EidId2;
                        double field_0x10;
                        double field_0x18;
                        double field_0x20;
                        double field_0x28;
                        float field_0x30;
                        float field_0x34;
                        int pad[8];
                    } Sub[Count_0x00];

                    FSeek(startof(Offset_0x00) + 0x70);
                };
                break;
            case kTimelineElem_BattleVoiceTrigger: // 1053
                {
                    // 40 53 48 83 EC ? 48 8B D9 48 83 C1 ? E8 ? ? ? ? 48 85 C0 74 ? 48 8B C8 E8 ? ? ? ? 48 8B 0D
                    int field_0x00;
                    int BattleVoiceCategoryId;
                    byte pad[0x1C];
                };
                break;
            case kTimelineElem_1056:
                {
                    // 40 53 48 83 EC ? 48 8B D9 E8 ? ? ? ? 48 85 C0 74 ? 48 8B 10 48 8B C8 FF 52 ? C5 F8 57 C0
                    // 40 53 48 83 EC ? 80 79 ? ? 48 8B D9 75 ? E8 ? ? ? ? 48 85 C0 74 ? 48 8B 10 48 8B C8 FF 52 ? C5 F8 57 C0
                    int FrameCountMaybe;
                    int FrameCount2Maybe;
                };
                break;
            case kTimelineElem_DisableReceiver: // 1058
                {
                    // 40 53 48 83 EC ? 48 8B D9 E8 ? ? ? ? 48 85 C0 74 ? 48 8B 10 48 8B C8 FF 52 ? 4C 8B 05 ? ? ? ? 48 8B 15 ? ? ? ? 4A 8B 8C C2 ? ? ? ? 8B D0 4C 8B 01 41 FF 50 ? 48 85 C0 74 ? 48 8B 4B ? 80 79 ? ? 74 ? 33 D2
                    int NameOffset <format=hex, fgcolor=cRed>;
                    int field_0x04;
                    int Pad[2];
                    
                    FSeek(startof(UnionType) + NameOffset);
                    string Path <bgcolor=cGray>;
                    
                    FSeek(startof(NameOffset) + 0x08);
                };
                break;
            case 1059:
                {
                    // 48 89 5C 24 ? 48 89 6C 24 ? 48 89 74 24 ? 57 48 83 EC ? 48 8B F9 48 83 C1 ? E8 ? ? ? ? 48 8B C8
                    int NameOffset <format=hex, fgcolor=cRed>;
                    float field_0x04;
                    
                    FSeek(startof(UnionType) + NameOffset);
                    string Path <bgcolor=cGray>;
                    
                    FSeek(startof(NameOffset) + 0x08);
                };
                break;
            case 1064:
                {
                    // 48 89 5C 24 ? 48 89 6C 24 ? 56 57 41 56 48 83 EC ? 48 8B E9 48 83 C1
                    int UnkIdUnused;
                    int NameOffset <format=hex, fgcolor=cRed>;
                    int field_0x08;
                    byte pad[0x10];
                    
                    FSeek(startof(UnionType) + NameOffset);
                    string Name <bgcolor=cGray>;
                    
                    FSeek(startof(UnionType) + 0x1C);
                };
                break;
            case 1066:
                {
                    // 48 89 5C 24 ? 57 48 83 EC ? 48 8B F9 48 83 C1 ? E8 ? ? ? ? 48 8B C8 E8 ? ? ? ? 48 8B 0D ? ? ? ? 48 8D 54 24 ? 44 8B 40 ? E8 ? ? ? ? 48 8D 4C 24 ? E8 ? ? ? ? 48 8B 5C 24 ? 84 C0 74 ? 48 8B CB E8 ? ? ? ? 48 85 C0 74 ? 48 8B 4F ? 48 8B 90
                    int field_0x00;
                };
                break;
            case 1075:
                {
                    // 48 8B C4 48 89 58 ? 48 89 68 ? 48 89 70 ? 57 48 83 EC ? 48 8B F1 C5 F8 29 70 ? 48 83 C1
                    int field_0x00;
                    byte Pad[0x20];
                };
                break;
             case kTimelineElem_1084:
                {
                    // 40 53 48 83 EC ? 48 8B D9 48 83 C1 ? E8 ? ? ? ? 48 8B C8 E8 ? ? ? ? 48 85 C0 74 ? 48 8B 0D ? ? ? ? 8B 91 ? ? ? ? 39 50 ? 75 ? 48 8B 43 ? 48 81 C1
                    int UnkType;
                    byte Pad[0x20];
                };
                break;
            case kTimelineElem_1088:
                {
                    // 48 89 5C 24 ? 48 89 6C 24 ? 48 89 74 24 ? 57 48 83 EC ? 48 8B E9 48 83 C1 ? E8 ? ? ? ? 48 8B C8 E8
                    int field_0x00;
                    float field_0x04;
                    float field_0x08;
                    int field_0x0C;
                    int field_0x10;
                    float field_0x14;
                    float field_0x18;
                    byte field_0x1C;
                    byte pad[0x03];
                };
                break;
            case kTimelineElem_DisableCharaUnk: // 1097
                {
                    // 48 89 5C 24 ? 57 48 83 EC ? 48 8B F9 E8 ? ? ? ? 48 8B C8 48 8B 10 FF 52 ? 4C 8B 05 ? ? ? ? 48 8B 15 ? ? ? ? 4A 8B 8C C2 ? ? ? ? 8B D0 4C 8B 01 41 FF 50 ? 4C 8B C8
                    int NameOffset <format=hex>;
                    byte Bool_0x04;
                    byte pad[7];

                    FSeek(startof(UnionType) + NameOffset);
                    string Name <bgcolor=cGray>;
                    
                    FSeek(startof(NameOffset) + 0x0C);
                };
                break;
            case kTimelineElem_1099:
                {
                    // 48 89 5C 24 ? 48 89 74 24 ? 48 89 7C 24 ? 55 48 8B EC 48 81 EC ? ? ? ? 48 8B 05 ? ? ? ? 48 33 C4 48 89 45 ? 48 8B D9 48 83 C1
                    int field_0x00;
                    byte Bool_0x04;  // Uses CameraTransition id 507 if this is false
                    byte pad[3];
                    float field_0x08;
                    int UnkFrames1;
                    int UnkFrames2;
                    float field_0x14;
                    float field_0x18;
                    float field_0x1C;
                    byte pad[0x10];
                };
                break;
            case 1102:
                {
                    // 48 89 5C 24 ? 48 89 74 24 ? 57 48 83 EC ? 48 8B F9 E8 ? ? ? ? 48 8B 57
                    int Offset_0x00 <format=hex>;
                    byte pad[4];
                    
                    FSeek(startof(UnionType) + Offset_0x00);
                    string Path <bgcolor=cGray>;
                    
                    FSeek(startof(Offset_0x00) + 0x08);
                };
                break;
            case 1103:
                {
                    // 48 89 5C 24 ? 48 89 74 24 ? 57 48 83 EC ? C5 F8 29 7C 24 ? 48 8B F9 E8 ? ? ? ? 48 8B 57
                    int Offset_0x00 <format=hex>;
                    byte pad[4];
                    
                    FSeek(startof(UnionType) + Offset_0x00);
                    string Path <bgcolor=cGray>;
                    
                    FSeek(startof(Offset_0x00) + 0x08);
                };
                break;
            case 1107:
                {
                    int Offset_0x00 <format=hex>;
                    byte pad[4];
                    
                    FSeek(startof(UnionType) + Offset_0x00);
                    string Path <bgcolor=cGray>;
                    
                    FSeek(startof(Offset_0x00) + 0x08);
                };
                break;
            case 1115:
                {
                    // 40 53 48 83 EC ? 48 8B D9 B0
                    int FramesMaybe;
                    int field_0x04;
                    float field_0x08;
                    int field_0x0C;
                    int field_0x10;
                    float field_0x14;
                    int field_0x18;
                    float field_0x1C;
                    int field_0x20;
                    int field_0x24;
                    float field_0x28;
                    int field_0x2C;
                    byte field_0x30;
                    byte pad[3];
                    float field_0x34;
                    byte field_0x38;
                    byte field_0x39;
                    byte pad_[0x1E];
                };
                break;
            case ActionEventTrigger: // 1117
                {
                    // 48 89 5C 24 ? 57 48 83 EC ? 48 8B F9 48 83 C1 ? E8 ? ? ? ? 48 8B C8 48 8B 10 FF 52 ? 48 8B 0D ? ? ? ? 48 8D 54 24 ? 44 8B C0 E8 ? ? ? ? 48 8B 5C 24
                    int UnkId; // has hardcoded check on id 79 and 80
                    byte pad[0x20];
                };
                break;
            case 1130:
                {
                    // 48 8B 05 ? ? ? ? C6 40 ? ? C3 48 8B 05
                    byte pad[0x20];
                };
                break;
            default:
                Printf("Unsupported UnionType %d\n", UnionType);
                break;   
        }
    } ElementData <bgcolor=cBlack>;
} TimelineElementDataUnion;

typedef struct
{
    int field_0x00;
    int UnkNameOffset <format=hex, fgcolor=cRed>;
    int TimelineElemUnionTypeOrLayerId <comment="Not sure which.">; // Game hashes this with FNV1A for some reason
    int FrameStart;
    int NumFrames;
    int field_0x14;
    byte field_0x18;
    byte field_0x19;
    byte field_0x1A;
    byte field_0x1B;
    int DataOffset <format=hex, fgcolor=cRed>;
    
    FSeek(startof(field_0x00) + UnkNameOffset);
    string Name <bgcolor=cGray>;
    
    FSeek(startof(field_0x00) + DataOffset);
    TimelineElementDataUnion DataUnion <bgcolor=cDkGreen>;
    
    // Fix
    FSeek(startof(field_0x00) + 0x20);
} TimelineElement <bgcolor=cRed, read=Str("%d, [%d->%d] Type %s (%d)", field_0x00, FrameStart, FrameStart+NumFrames, 
    EnumToString(DataUnion.UnionType) == "" ? Str("%d", DataUnion.UnionType) : EnumToString(DataUnion.UnionType), DataUnion.UnionType)>;

typedef struct
{
    int Type;
    byte pad[0x24];
} TargetData <read=Type, bgcolor=cRed>;

typedef struct
{
    int Index;
    int AssetArrayListOffset <format=hex, fgcolor=cRed>;
    int NumAssets <fgcolor=cGreen>;
    
    if (NumAssets)
    {
        FSeek(startof(Index) + AssetArrayListOffset);
        int AssetEntryOffsets[NumAssets];
        
        local int j = 0;
        for (j = 0; j < NumAssets; j++)
        {
            FSeek(startof(AssetEntryOffsets) + AssetEntryOffsets[j]);
            struct
            {
                int field_0x00;
                int field_0x04;
                int field_0x08;
                int field_0x0C;
                int field_0x10;
                int field_0x14 <format=hex, fgcolor=cRed>;
                int field_0x18 <format=hex, fgcolor=cRed>;   
                
                FSeek(startof(field_0x00) + field_0x14);
                string FileName <bgcolor=cGray>;
                
                FSeek(startof(field_0x00) + field_0x18);
                string Path <bgcolor=cGray>;
        
                FSeek(startof(field_0x00) + 0x1C);
            } Asset <bgcolor=cDkBlue, read=Path>;
        }

        // Fix
        FSeek(startof(Index) + 0x0C);
    }


} AssetGroup <bgcolor=cRed>;
            
struct
{
    struct
    {
        int Magic;
        int Version;
        int Padding[4];
        int TimelineOffset <format=hex, fgcolor=cRed>;
    } Header <bgcolor=cBlack>;
    
    // 0x98 = stride of 0x58
    
    FSeek(Header.TimelineOffset);
    
    struct
    {
        int EditorId <fgcolor=cGreen>;
        int TimelineElementsOffset <format=hex, fgcolor=cRed>;
        int TimelineElementCount <fgcolor=cGreen>;
        int AssetGroupsOffset <format=hex, fgcolor=cRed>;
        int AssetGroupCount <fgcolor=cGreen>;
        int TargetsArrayOffset <format=hex, fgcolor=cRed>;
        int TargetCount <fgcolor=cGreen>;
        int TotalFrames;
        char Bool_0x20;
        byte pad[0x03];
        
        local int i = 0;
        struct
        {
            for (i = 0; i < TimelineElementCount; i++)
            {
                FSeek(startof(Timeline) + TimelineElementsOffset + (i * 0x20));
                TimelineElement Elements <bgcolor=cBlue>;
            }
        } TimelineElementList;
        
        struct
        {
            for (i = 0; i < AssetGroupCount; i++)
            {
                FSeek(startof(Timeline) + AssetGroupsOffset + (i * 0x0C));
                AssetGroup AssetGroup_ <bgcolor=cRed>;
            }
        } AssetGroups;
        
        FSeek(startof(Timeline) + TargetsArrayOffset);
        struct
        {
            int Offsets[TargetCount];
            for (i = 0; i < TargetCount; i++)
            {
                FSeek(startof(Offsets) + Offsets[i]);
                TargetData TargetData_ <bgcolor=cPurple>;
            }
        } TargetDataArray;
    } Timeline <bgcolor=cYellow>;
} CharaTimelineFile <open=true>;
